<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAnElection" xml:space="preserve">
    <value>Add an Election</value>
  </data>
  <data name="AddElectionOption" xml:space="preserve">
    <value>Add Election Option</value>
  </data>
  <data name="AddOption" xml:space="preserve">
    <value>Add Option</value>
  </data>
  <data name="Australia" xml:space="preserve">
    <value>Australia</value>
  </data>
  <data name="Candidate" xml:space="preserve">
    <value>Candidate</value>
  </data>
  <data name="CannotAddOptionNoCandidate" xml:space="preserve">
    <value>You cannot add an option with a candidate ID when no candidate with that ID exists. Remove the ID and add an option without it if there is no associated candidate</value>
  </data>
  <data name="Desciption" xml:space="preserve">
    <value>Desciption</value>
  </data>
  <data name="Election" xml:space="preserve">
    <value>Election</value>
  </data>
  <data name="ElectionDescriptionRequired" xml:space="preserve">
    <value>Election Description Required</value>
  </data>
  <data name="ElectionDescriptionRequiredDescription" xml:space="preserve">
    <value>Election description is required and cannot be empty</value>
  </data>
  <data name="ElectionName" xml:space="preserve">
    <value>Election Name</value>
  </data>
  <data name="ElectionNameRequired" xml:space="preserve">
    <value>Election Name Required</value>
  </data>
  <data name="ElectionNameRequiredDesciption" xml:space="preserve">
    <value>Election name is required and cannot be empty</value>
  </data>
  <data name="ElectionOptions" xml:space="preserve">
    <value>Election Options</value>
  </data>
  <data name="EndDate" xml:space="preserve">
    <value>End Date</value>
  </data>
  <data name="England" xml:space="preserve">
    <value>England</value>
  </data>
  <data name="General Election" xml:space="preserve">
    <value>General Election</value>
  </data>
  <data name="InvalidDateRange" xml:space="preserve">
    <value>Invalid Date Range</value>
  </data>
  <data name="InvalidDateRangeDescription" xml:space="preserve">
    <value>End date must be later than the start date</value>
  </data>
  <data name="InvalidEndDate" xml:space="preserve">
    <value>Invalid End Date</value>
  </data>
  <data name="InvalidEndDateDescription" xml:space="preserve">
    <value>End date must be after today's date</value>
  </data>
  <data name="InvalidStartDate" xml:space="preserve">
    <value>Invalid Start Date</value>
  </data>
  <data name="InvalidStartDateDescription" xml:space="preserve">
    <value>Start date must be after today's date</value>
  </data>
  <data name="Ireland" xml:space="preserve">
    <value>Ireland</value>
  </data>
  <data name="Local Government Election" xml:space="preserve">
    <value>Local Government Election</value>
  </data>
  <data name="Northern Island" xml:space="preserve">
    <value>Northern Island</value>
  </data>
  <data name="OptionDescription" xml:space="preserve">
    <value>Option Description</value>
  </data>
  <data name="OptionName" xml:space="preserve">
    <value>Option Name</value>
  </data>
  <data name="Parliamentary Election" xml:space="preserve">
    <value>Parliamentary Election</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Scotland" xml:space="preserve">
    <value>Scotland</value>
  </data>
  <data name="SelectACountry" xml:space="preserve">
    <value>Select a country</value>
  </data>
  <data name="SelectAnElectionType" xml:space="preserve">
    <value>Select an election type</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="United States" xml:space="preserve">
    <value>United States</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="Wales" xml:space="preserve">
    <value>Wales</value>
  </data>
</root>