@page "/"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using VotingSystem.API.DTO.DbResults
@using VotingSystem.API.DTO.ErrorHandling
@using VotingSystem.API.DTO.Responses
@using VotingSystem.API.Enums

@* button that runs an async c# method on click and passes a value*@
@* https://stackoverflow.com/questions/55497072/execute-async-method-on-button-click-in-blazor *@

@* Test button to ensure dependency injections have not broken interactive server *@
@* <button class="button-styled-nav-link " @onclick="async () => await GetCustomerVotingHistory()">Get Account Details</button>  *@


<PageTitle>Home</PageTitle>

@if (Error != null)
{
    <ErrorPopup Error="@Error" />
}
else if (CustomerDetails == null)
{
    <h1><em>Loading...</em></h1>
}
else
{
    <h1>Welcome @CustomerDetails.FirstName!</h1>

    @if (CustomerDetails.NewUser)
    {
        <div class="content-container">
            Here's how to use the voting system:
            <ul>
                <li>Enter your profile details such as your legal name and location, it's important this is correct as it will be used for your recommended elections.</li>
                <li>Upload a valid form of identification within your region and wait for a member of our team to verify it.</li>
                <li>That's all for setup, you're ready to vote!</li>
            </ul>
            <NavLink class="button-styled-nav-link" href="@($"profile/userId={LoginResult.UserId}")">
                <span class="nav-bar-formatting bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Get Started
            </NavLink>
        </div>
    }
    else
    {
        <h2>Ongoing Elections in the @CustomerDetails.Country.EnumDisplayName()</h2>
        <div class="content-container">
            None
        </div>

        <h2>Your Votes</h2>
        <table>
            <tr>
                <th>Election ID</th>
                <th>Election</th>
                <th>Date You Voted</th>
            </tr>
            @if (VotingHistory != null && VotingHistory.Any())
            {
                @foreach (var vote in VotingHistory)
                {
                    <tr>
                        <td>@vote.ElectionId</td>
                        <td>@vote.ElectionName</td>
                        <td>@vote.VoteDate</td>
                    </tr>
                }
            }
            else
            {
                <tr>You have no previous voting history!</tr>
            }
        </table>
    }
}

@code {
    private static readonly string ControllerUrl = "https://localhost:44389/api/";
    private readonly HttpClient _httpClient = new HttpClient 
    {
        BaseAddress = new Uri(ControllerUrl),
        DefaultRequestHeaders = { Authorization = new AuthenticationHeaderValue("Bearer", LoginResult.AccessToken) }
    };

    public ErrorResponse? Error { get; set; }
    public static LoginResponse LoginResult { get; } = new LoginResponse { UserId = 1 };
    public GetCustomerAccountDetailsResponse? CustomerDetails { get; set; }
    public List<GetVotingHistoryResponse> VotingHistory { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await GetCustomerInfo(LoginResult.UserId);
        await GetCustomerVotingHistory(LoginResult.UserId);
    }

    private async Task GetCustomerInfo(int customerId)
    {
        try
        {
            var response = await _httpClient.GetAsync($"Customer/GetCustomerDetails?id={customerId}");

            if (response.IsSuccessStatusCode)
            {
                CustomerDetails = await response.Content.ReadFromJsonAsync<GetCustomerAccountDetailsResponse>();
            }
            else
            {
                Error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            }
        }
        catch (Exception ex)
        {
            Error = new ErrorResponse
            {
                Title = "Internal Server Error",
                Description = $"An unknown error occurred when trying to retrieve customer details for customer {customerId}",
                StatusCode = 500,
                AdditionalDetails = ex.Message
            };
        }
    }

    private async Task GetCustomerVotingHistory(int customerId)
    {
        try
        {
            var response = await _httpClient.GetAsync($"Customer/GetCustomerVotingHistory?id={customerId}");

            if (response.IsSuccessStatusCode)
            {
                VotingHistory = await response.Content.ReadFromJsonAsync<List<GetVotingHistoryResponse>>() ?? [];
            }
            else
            {
                Error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            }
        }
        catch (Exception ex)
        {
            Error = new ErrorResponse
            {
                Title = "Internal Server Error",
                Description = $"An unknown error occurred when trying to retrieve voting history for customer {customerId}",
                StatusCode = 500,
                AdditionalDetails = ex.Message
            };
        }
    }
}
