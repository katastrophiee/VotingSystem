@page "/profile/userId={userId:int}"
@using VotingSystem.API.Enums
@using VotingSystem.Components.Pages.Shared

@if (Errors.Any())
{
    <ErrorPopup Errors="@Errors" />
}
@if (CustomerDetails == null)
{
    <h1><em>@Localizer["Loading"]</em></h1>
}
else
{
    <h1>@Localizer["Profile"]</h1>
    <h2>@Localizer["User"] ID: @UserId</h2>
    @if (!Editable)
    {
        @if ((string.IsNullOrEmpty(CustomerDetails.FirstName)
            || string.IsNullOrEmpty(CustomerDetails.LastName)
            || CustomerDetails.Country == CustomerCountry.Unknown)
            && CurrentIdDocument is not null 
            && CurrentIdDocument.Id != 0)
        {
            <div class="warning-container">@Localizer["MissingDetails"]</div>
        }
        <div class="content-container profile-data">
            <div>@Localizer["Name"]: @CustomerDetails.FirstName @CustomerDetails.LastName</div>
            <div>@Localizer["Email"]: @CustomerDetails.Email</div>
            <div>@Localizer["Country"]: @CustomerDetails.Country.EnumDisplayName()</div>
            @if (CurrentIdDocument is null)
            {
                <div>@Localizer["NotVerifiedUploadId"]</div>
                //Needs changing to add localisation
                <InputFile @ref="UploadedIdDocumentFile" OnChange="ShowUploadButton" class="file-uploader"></InputFile>
                @if(ShowUpdateButton)
                {
                    <button @onclick="async () => await UploadIdentificationDocument()">@Localizer["Upload"]</button>
                }
            }
            else
            {
                @if (!CustomerDetails.IsVerified)
                {
                    @if (CurrentIdDocument.IdRejected is not null && CurrentIdDocument.IdRejected is true)
                    {
                        <div>@Localizer["IdRejected"]</div>
                        <div>@Localizer["IdRejected"]: @CurrentIdDocument.RejectionReason</div>
                        <div>@Localizer["TryDifferentIdForm"]</div>
                    }
                    else if (CurrentIdDocument.IdRejected is null)
                    {
                        <div>@Localizer["IdUploaded"]</div>
                    }
                }
                <DocumentRenderer Document=@CurrentIdDocument></DocumentRenderer>
                @if (CurrentIdDocument.ExpiryDate is not null && CurrentIdDocument.ExpiryDate < DateTime.Now.AddMonths(3))
                {
                    <div class="seperated">@Localizer["IdExpiresInThreeMonth"]</div>
                }
                else if (CurrentIdDocument.IdRejected is not null && CurrentIdDocument.IdRejected is true)
                {
                    <div class="seperated">@Localizer["SubmitAnother"]</div>
                }
                else
                {
                    <div class="seperated">@Localizer["UploadNewId"]</div>
                }
                //Needs changing to add localisation
                <InputFile @ref="UploadedIdDocumentFile" OnChange="ShowUploadButton" class="file-uploader"></InputFile>
                @if (ShowUpdateButton)
                {
                    <div class="warning-container">@Localizer["NeedReverifying"]</div>
                    <button @onclick="async () => await UploadIdentificationDocument()">@Localizer["Upload"]</button>
                    <button @onclick="() => CurrentIdDocument = new()">@Localizer["Cancel"]</button>
                }
            }
        </div>

        <button @onclick="() => Editable = true">@Localizer["ChangeDetails"]</button>
    }
    else
    {
         <div class="content-container profile-data">
            <EditForm Model="@UpdateCustomerProfileRequest" OnValidSubmit="async () => await Update()">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="firstName">@Localizer["FirstName"]:</label>
                <InputText id="firstName" @bind-Value="UpdateCustomerProfileRequest.FirstName" />

                <label for="lastName">@Localizer["LastName"]:</label>
                <InputText id="lastName" @bind-Value="UpdateCustomerProfileRequest.LastName" />

                <label for="email">@Localizer["Email"]:</label>
                <InputText id="email" @bind-Value="UpdateCustomerProfileRequest.Email" />

                <div class="form-group">
                    <label for="country">@Localizer["Country"]:</label>
                    <InputSelect id="country" @bind-Value="UpdateCustomerProfileRequest.Country">
                        @foreach (var country in Enum.GetValues(typeof(CustomerCountry)).Cast<CustomerCountry>().Where(c => c != CustomerCountry.Unknown))
                        {
                            <option value="@country">@country.EnumDisplayName()</option>
                        }
                    </InputSelect>
                </div>
                <button @onclick="() => Editable = false">@Localizer["Cancel"]</button>
                <button type="submit">@Localizer["Update"]</button>
            </EditForm>
         </div>
    }
}