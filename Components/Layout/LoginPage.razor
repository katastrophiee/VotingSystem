@page "/login"
@rendermode InteractiveServer
@* @attribute [StreamRendering] *@
@using VotingSystem.API.DTO.ErrorHandling
@using VotingSystem.API.DTO.Requests
@using VotingSystem.API.DTO.Responses
@inject NavigationManager NavigationManager

<h3>Login Page</h3>

<EditForm Model="LoginDetails" OnValidSubmit="async () => await HandleValidSubmit()" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="LoginDetails.Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="LoginDetails.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private static readonly string ControllerUrl = "https://localhost:44389/api/";
    private readonly HttpClient _httpClient = new HttpClient { BaseAddress = new Uri(ControllerUrl) };

    public LoginRequest LoginDetails { get; set; }
    public ErrorResponse? Error { get; set; }

    private readonly SignInManager<IdentityUser> _signInManager;

    public LoginPage(SignInManager<IdentityUser> signInManager)
    {
        _signInManager = signInManager;
    }

    protected override void OnInitialized()
    {
        LoginDetails = new();
    }

    private async Task HandleValidSubmit()
    {
        var response = await _httpClient.PostAsJsonAsync<LoginRequest>($"Auth/PostCustomerLogin", LoginDetails);

        if (response.IsSuccessStatusCode)
        {
            // var result = await response.Content.ReadFromJsonAsync<LoginResponse>();


            //save token
            // _signInManager.

            // Navigate to the main layout
            // NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            // show error message
        }
    }

}
